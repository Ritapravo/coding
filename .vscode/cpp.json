{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"opening template": {
		"prefix": "cpp",
		"body": [
			//"///g++ \"first.cpp\" -o \"first\" && \"first\"",
			//"//g++ \"$TM_FILENAME\" && a",
			// "#include<iostream>",
			// "#include<vector>",
			"#include<bits/stdc++.h>",
			// "#define int long long int",
			// "#define v(x) vector<x>",
			"using namespace std;",
			// "void print(v(v(int)) &arr);",
			// "void print(v(int)&arr);",
			// "\n\nsigned main(){",
			"\n\nint main(){",
			"\t",
			"\treturn 0;",
			"}\n"
		],
		"description": "start"
	},
	"print": {
		"prefix": "print",
		"body": [
			"\n\nvoid print(v(int)&arr){",
			"\tcout<<\"{\";",
			"\tfor(auto i=arr.begin(); i!=arr.end(); i++){",
			"\t\tcout<<*i;",
			"\t\tif(i!=arr.end()-1)",
			"\t\t\tcout<<\",\";",
			"\t}cout<<\"}\"<<endl;",
			"}",
			"void print(v(v(int)) &arr){",
			"\tcout<<\"{\";",
			"\tfor(auto i = arr.begin(); i!=arr.end(); i++){",
			"\t\tcout<<\"{\";",
			"\t\tfor(auto j =(*i).begin(); j!=(*i).end(); j++){",
			"\t\t\tcout<<*j;",
			"\t\t\tif(j!=(*i).end()-1)",
			"\t\t\t\tcout<<\",\";",
			"\t\t}",
			"\t\tcout<<\"}\";",
			"\t\tif(i!=arr.end()-1)",
			"\t\t\t\tcout<<\",\";",
			"\t}cout<<\"}\"<<endl;",
			"}"
		],
		"description": "print functions"
	},
	"pri": {
		"prefix": "pri",
		"body": [
			"cout<<${val}<<endl;"
		],
		"description": "cout"
	},
	"v2": {
		"prefix": "v2",
		"body": [
			"v(v(int))${arr};"
		],
		"description": "2d vector"
	},
	"fori": {
		"prefix": "fori",
		"body": [
			"for(int i = 0; i<${size}; i++){${code}}"
		],
		"description": "for loop"
	},
	"forj": {
		"prefix": "forj",
		"body": [
			"for(int j = 0; j<${size}; j++){${code}}"
		],
		"description": "for loop"
	},
	"run": {
		"prefix": "run",
		"body": [
			"//g++ $TM_FILENAME && ./a.out && rm ./a.out",
			"//g++ $TM_FILEPATH && ./a.out && rm ./a.out"
		],
		"description": "run command"
	},
	"pow": {
		"prefix": "pow",
		"body": [
			"int pow(int x, unsigned int y, int p){",
			"\tx = x%p;",
			"\tint res = 1;",
			"\twhile(y>0){",
			"\t\tif(y%2==1)",
			"\t\t\tres = (res*(x%p))%p;",
			"\t\ty = y/2;",
			"\t\tx = (x*x)%p;",
			"\t}",
			"\treturn res;",
			"}"
		],
		"description": "run command"
	},
	"fast": {
		"prefix": "fast",
		"body": [
			"ios_base::sync_with_stdio(0);cin.tie(0);",
		],
		"description": "cin_tie...."
	},
	"file": {
		"prefix": "file",
		// "body2": [
		// 	"freopen(\"${TM_DIRECTORY/(^~)/\\/home\\/ritapravo/}/input.txt\", \"r\", stdin);",
		// 	"// freopen(\"output.txt\", \"w\", stdout);"
		// ],
		"body": [
			"string filePath(__FILE__);",
			"string inputPath = filePath.substr(0, filePath.find_last_of(\"//\"))+\"/input.txt\";",
			"freopen(inputPath.c_str(), \"r\", stdin);"
		],
		"description": "take i/o from file...."
	},
	"graph": {
		"prefix": "graph",
		"body": [
			"#include<iostream>",
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"#define v(a) vector<a>",
			"void print(v(int)&);",
			"void graphInput (vector<int> [], int );\n",
			"int main() {",
			"\tfreopen(\"${TM_DIRECTORY/(^~)/\\/home\\/ritapravo/}/input.txt\", \"r\", stdin);",
			"\tint n, m;",
			"\tcin >> n >> m;",
			"\tvector<int> adj[n+1];",
			"\tgraphInput(adj, m);",
			"\treturn 0;",
			"}\n",
			"void graphInput (vector<int> adj[], int m){",
			"\tfor(int i = 0; i<m; i++){",
			"\t\tint u, v;",
			"\t\tcin >> u >> v ;",
			"\t\tadj[u].push_back(v);",
			"\t\tadj[v].push_back(u);",
			"\t}",
			"}",
		],
		"description": "graph initializer...."
	},
}